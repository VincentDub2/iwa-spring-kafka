services:
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    ports:
      - "9092:9092"

  service-users:
    build:
      context: ./service-users
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-service-users:5432/usersdb
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
      - db-service-users
      - api-gateway
    networks:
      - kafka-network
      - db-network
      - api-network
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health  | grep UP || exit 1"
      interval: 30s
      timeout: 60s
      retries: 5
    restart: unless-stopped

  db-service-users:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: usersdb
    ports:
      - "5432"
    volumes:
      - usersdb_data:/var/lib/postgresql/data
    networks:
      - db-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d usersdb" ]
      interval: 30s
      timeout: 5s
      retries: 3

  service-emplacements:
    build:
      context: ./service-emplacements
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-service-emplacements:5432/emplacementsdb
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
      - db-service-emplacements
    networks:
      - kafka-network
      - db-network
      - api-network
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health  | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 15
    restart: unless-stopped

  db-service-emplacements:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: emplacementsdb
    ports:
      - "5433"
    volumes:
      - emplacementsdb_data:/var/lib/postgresql/data
    networks:
      - db-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d emplacementsdb" ]
      interval: 30s
      timeout: 5s
      retries: 3

  discovery-service:
    #Image: discovery-service:latest   Discovery server Eureka
    build:
      context: ./discovery-service-eureka
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"  # Output to port 8761
    networks:
      - api-network
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 15
    restart: unless-stopped

  api-gateway:
    build:
        context: ./api-gateway
        dockerfile: Dockerfile
    container_name: api-gateway
    depends_on:
        - discovery-service
    environment:
      - EUREKA_URI=http://discovery-service:8761/eureka
    ports:
      - "8090:8080"  # Output to port 8090
    networks:
      - api-network
    #env_file: ./env/gateway/api.env
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 15
    restart: unless-stopped



volumes:
  usersdb_data:
  emplacementsdb_data:

networks:
  api-network:
  kafka-network:
    driver: bridge
  db-network:
    driver: bridge

